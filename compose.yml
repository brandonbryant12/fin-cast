networks:
  app_network:
    driver: bridge

services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app_network
    depends_on:
      - web
      - server

  web:
    image: brandonbryant/fin-cast-web:latest
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      args:
        PUBLIC_SERVER_URL: ${PUBLIC_SERVER_URL:-http://localhost:3035}
    # ports:
    #   - 8085:80
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test:
        ['CMD-SHELL', 'curl --fail --silent http://localhost:80/healthcheck']
    depends_on:
      - server
    networks:
      - app_network

  server:
    image: brandonbryant/fin-cast-server:latest
    build:
      context: .
      dockerfile: ./apps/server/Dockerfile
    # ports:
    #   - 3035:3000
    environment:
      - SERVER_AUTH_SECRET=${SERVER_AUTH_SECRET}
      - SERVER_POSTGRES_URL=${SERVER_POSTGRES_URL}
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=3000
      - PUBLIC_WEB_URL=${PUBLIC_WEB_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test:
        [
          'CMD-SHELL',
          'wget --quiet --spider http://0.0.0.0:3000/healthcheck',
        ]
    depends_on:
      - db
    networks:
      - app_network

  db:
    image: docker.io/postgres:latest
    ports:
      - 5432:5432
    command: ['postgres', '-c', 'log_statement=all']
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      test: ['CMD', 'pg_isready', '-U', '${POSTGRES_USER:-postgres}', '-d', '${POSTGRES_DB:-postgres}']
    networks:
      - app_network

  drizzle:
    image: brandonbryant/fin-cast-db:latest
    restart: 'no'
    command: /bin/sh
    build:
      context: .
      dockerfile: ./packages/db/Dockerfile
    environment:
      - DB_POSTGRES_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - TURBO_UI=true
    profiles:
      - drizzle
    depends_on:
      - db
    networks:
      - app_network

volumes:
  postgres_data:
  caddy_data:
  caddy_config: