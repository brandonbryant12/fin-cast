name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-push:
    name: Build, Test & Push Docker Images
    runs-on: ubuntu-latest
    environment:
      name: ci-cd
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.7.0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run build
        run: pnpm build
      - name: Run lint check
        run: pnpm lint
      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata for server image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: meta_server
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/fin-cast-server
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push server image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: true
          tags: ${{ steps.meta_server.outputs.tags }}
          labels: ${{ steps.meta_server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Extract metadata for web image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: meta_web
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/fin-cast-web
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push web image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/web/Dockerfile
          push: true
          tags: ${{ steps.meta_web.outputs.tags }}
          labels: ${{ steps.meta_web.outputs.labels }}
          build-args: |
            PUBLIC_SERVER_URL=${{ vars.PUBLIC_SERVER_URL || 'http://localhost:3035' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Extract metadata for db image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: meta_db
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/fin-cast-db
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push db image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/db/Dockerfile
          push: true
          tags: ${{ steps.meta_db.outputs.tags }}
          labels: ${{ steps.meta_db.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Droplet
    needs: build-test-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: ci-cd
    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            mkdir -p /opt/fin-cast && cd /opt/fin-cast || exit 1
            git pull origin main || exit 1

            cat << EOF > .env
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            SERVER_AUTH_SECRET=${{ secrets.SERVER_AUTH_SECRET }}
            SERVER_POSTGRES_URL=${{ secrets.SERVER_POSTGRES_URL }}
            PUBLIC_WEB_URL=${{ secrets.PUBLIC_WEB_URL }}
            SERVER_HOST=${{ secrets.SERVER_HOST }}
            SERVER_PORT=${{ secrets.SERVER_PORT }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            EOF

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            docker-compose pull
            docker-compose down --remove-orphans
            docker-compose up -d
            docker image prune -f